#include <iostream>
#include <string>
#include <queue>
using namespace std;

// 괴물이 있는게 0, 없는게 1

int n, m;
int map[1001][1001];

int dx[] = { -1, 1, 0, 0 };
int dy[] = { 0, 0, -1, 1 };

int bfs(int x, int y) {
	queue<pair<int, int>> q;
	q.push({ x, y });

	// 큐가 비워질때까지 반복
	while (!q.empty()) {
		int x = q.front().first;
		int y = q.front().second;
		q.pop();
		//현재 위치에서 4가지 방향으로의 위치 확인
		for (int i = 0; i < 4; i++) {
			int nx = x + dx[i];	// 다음 노드좌표
			int ny = y + dy[i];	// 다음 노드좌표
			//미로 찾기 공간을 벗어난 경우의 예외처리
			if (nx < 0 || nx >= n || ny < 0 || ny >= m) continue;
			//벽인 경우 예외처리
			if (map[nx][ny] == 0) continue;
			//해당 노드를 처음 방문하는 경우에만 거리 기록
			if (map[nx][ny] == 1) {
				map[nx][ny] = map[x][y] + 1; // 다음노드의 좌표의 값에 전 노드좌표의 값 + 1 → 1씩 늘려가면서 cost 기록
				q.push({ nx, ny });
			}
		}
	}
	// 가장 오른쪽 아래까지의 최단거리 반환
	return map[n - 1][m - 1];
}

int main()
{
	cin >> n >> m;
	for (int i = 0; i < n; i++) {
		for (int j = 0; j < m; j++) {
			scanf("%1d", &map[i][j]);
		}
	}

	cout << bfs(0, 0) << endl;

	return 0;
}
